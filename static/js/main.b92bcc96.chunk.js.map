{"version":3,"sources":["utils/encoding.ts","utils/sapp.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["resolveInput","id","templateInputs","userInputs","Date","getMilliseconds","templateInput","Error","details","type","parseUnits","decimals","JSON","parse","e","value","resolveAbiInput","input","map","resolveData","data","Interface","signature","encodeFunctionData","inputs","buildTemplate","template","txs","tx","description","to","checkedTx","toString","useStyles","makeStyles","theme","content","padding","width","App","classes","useState","generatedTxs","setGeneratedTxs","setUserInputs","useSafeAppsSDK","sdk","connected","undefined","setTemplate","handleFileUpload","React","useCallback","a","file","target","files","reader","FileReader","onload","result","readAsBinaryString","console","error","build","execute","send","window","ethereum","enable","ethers","providers","Web3Provider","getSigner","sendTransaction","executeAll","prefersDarkMode","useMediaQuery","useMemo","createMuiTheme","palette","primary","blue","ThemeProvider","CssBaseline","className","name","accept","onChange","Object","entries","TextField","placeholder","hint","label","newInputs","updateUserInputs","Button","color","onClick","length","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b92bcc96.chunk.js","sourcesContent":["import { parseUnits } from '@ethersproject/units'\nimport { Interface } from '@ethersproject/abi'\nimport { AbiInput, InputId, InteractionTemplate, TemplateInput, TransactionAbi } from '../model/templates';\n\nconst resolveInput = (id: InputId | undefined, templateInputs: Record<InputId, TemplateInput>, userInputs: Record<InputId, string>): any | undefined => {\n    if (!id) return undefined\n    if (id === \"time_now\") return new Date().getMilliseconds() / 1000\n    const templateInput = templateInputs[id]\n    if (!templateInput) throw Error(\"Invalid id \" + id)\n    switch (templateInput.details.type) {\n        case \"bn\":\n            return parseUnits(userInputs[id], templateInput.details.decimals)\n        case \"string\":\n            return userInputs[id]\n        case \"json\":\n            try {\n                return JSON.parse(userInputs[id])\n            } catch (e) {\n                return userInputs[id]\n            }\n        case \"fixed\":\n            return templateInput.details.value\n    }\n}\n\nconst resolveAbiInput = (input: AbiInput, templateInputs: Record<InputId, TemplateInput>, userInputs: Record<InputId, string>): any | undefined => {\n    return (typeof input === \"string\") ? resolveInput(input, templateInputs, userInputs) : input.map((input) => resolveAbiInput(input, templateInputs, userInputs))\n}\n\nconst resolveData = (data: InputId | TransactionAbi | undefined, templateInputs: Record<InputId, TemplateInput>, userInputs: Record<InputId, string>): any | undefined => {\n    if (!data) return undefined\n    if (typeof data === \"string\") return resolveInput(data, templateInputs, userInputs)\n    const contractInterface = new Interface([\"function \" + data.signature])\n    return contractInterface.encodeFunctionData(data.signature, resolveAbiInput(data.inputs, templateInputs, userInputs))\n}\n\nexport interface GeneratedTx {\n    description?: string,\n    to?: any,\n    value?: any,\n    data?: any,\n}\n\nexport const buildTemplate = (template: InteractionTemplate, userInputs: Record<InputId, string>): GeneratedTx[] => {\n    return template.txs.map((tx) => {\n        return {\n            description: tx.description,\n            to: resolveInput(tx.to, template.inputs, userInputs),\n            value: resolveInput(tx.value, template.inputs, userInputs),\n            data: resolveData(tx.data, template.inputs, userInputs),\n        }\n    })\n}","import { GeneratedTx } from \"./encoding\";\n\nexport const checkedTx = (tx: GeneratedTx) => {\n    if (!tx.to) throw Error(\"To is required for Safe transactions\")\n    return {\n        to: tx.to.toString(),\n        value: tx.value?.toString() || \"0\",\n        data: tx.data?.toString() || \"0x\"\n    }\n}","import React, { useCallback, useState } from 'react'\nimport { Button, TextField } from '@material-ui/core'\nimport { makeStyles, createMuiTheme } from '@material-ui/core/styles'\nimport { ThemeProvider } from '@material-ui/styles'\nimport blue from '@material-ui/core/colors/blue'\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { InteractionTemplate, InputId } from './model/templates'\nimport { buildTemplate, GeneratedTx } from './utils/encoding'\nimport { ethers } from 'ethers'\nimport { useSafeAppsSDK } from '@gnosis.pm/safe-apps-react-sdk';\nimport { checkedTx } from './utils/sapp'\n\ndeclare global {\n  interface Window { ethereum: any; }\n}\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    padding: \"16px\"\n  },\n  input: {\n    width: \"100%\"\n  }\n}));\n\n\nconst updateUserInputs = (inputs: Record<string, string>, id: string, input: string) => {\n  const newInputs = { ...inputs }\n  newInputs[id] = input\n  return newInputs\n}\n\nconst App = () => {\n  const classes = useStyles();\n  const [generatedTxs, setGeneratedTxs] = useState<GeneratedTx[]>([])\n  const [userInputs, setUserInputs] = useState<Record<InputId, string>>({})\n  const { sdk, connected } = useSafeAppsSDK();\n  const [template, setTemplate] = useState<InteractionTemplate | undefined>(undefined)\n\n  const handleFileUpload = React.useCallback(async (e: React.ChangeEvent<HTMLInputElement>) => {\n    try {\n      const file = e.target.files!![0]\n      const reader = new FileReader()\n      reader.onload = (e) => {\n        if (!e.target?.result) return;\n        const template = JSON.parse(e.target.result.toString())\n        setTemplate(template)\n        setUserInputs({})\n        setGeneratedTxs([])\n      }\n      reader.readAsBinaryString(file)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [setTemplate, setGeneratedTxs, setUserInputs])\n\n  const build = useCallback(async () => {\n    if (!template) return\n    try {\n      const txs = buildTemplate(template, userInputs)\n      setGeneratedTxs(txs)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [userInputs, template, setGeneratedTxs])\n\n  const execute = useCallback(async (tx: GeneratedTx) => {\n    try {\n      if (connected) {\n        sdk.txs.send({ txs: [checkedTx(tx)] })\n        return\n      }\n      await window.ethereum.enable()\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      provider.getSigner().sendTransaction({\n        to: tx.to,\n        value: tx.value,\n        data: tx.data\n      })\n    } catch (e) {\n      console.error(e)\n    }\n  }, [connected, sdk])\n\n  const executeAll = useCallback(async (txs: GeneratedTx[]) => {\n    try {\n      sdk.txs.send({ txs: txs.map(checkedTx) })\n    } catch (e) {\n      console.error(e)\n    }\n  }, [sdk])\n\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  const theme = React.useMemo(() => createMuiTheme({\n    palette: {\n      type: prefersDarkMode ? 'dark' : 'light',\n      primary: blue,\n    },\n  }), [prefersDarkMode])\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className={classes.content}>\n        <h1>\n          Transaction template: {template?.name || \"Upload Template\"}\n        </h1>\n        <input type=\"file\" accept=\".json\" onChange={handleFileUpload} /><br />\n        {template && (<>\n          <h3>Inputs</h3>\n          {Object.entries(template.inputs).map(([id, input]) => {\n            switch (input.details.type) {\n              case \"bn\":\n              case \"json\":\n              case \"string\":\n                return (\n                  <TextField\n                    placeholder={input.details.hint}\n                    label={input.label}\n                    value={userInputs[id] || \"\"}\n                    onChange={(e) => { setUserInputs(updateUserInputs(userInputs, id, e.target.value)) }}\n                    className={classes.input} />\n                )\n            }\n          })}\n          <Button color=\"primary\" onClick={build}>Build</Button>\n          <h3>Transactions {connected && generatedTxs.length > 1 && (<Button color=\"primary\" onClick={() => executeAll(generatedTxs)}>Execute All</Button>)}</h3>\n          {generatedTxs.map((tx, index) => (\n            <>\n              {tx.description || `Transaction #${index + 1}`}\n              <Button color=\"primary\" onClick={() => execute(tx)}>Execute</Button>\n              <br />\n            </>\n          ))}\n        </>)}\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport SafeProvider from '@gnosis.pm/safe-apps-react-sdk';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SafeProvider>\n      <App />\n  </SafeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}