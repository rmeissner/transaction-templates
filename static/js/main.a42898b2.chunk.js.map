{"version":3,"sources":["utils/encoding.ts","utils/sapp.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["resolveInput","id","templateInputs","userInputs","Date","getMilliseconds","templateInput","Error","details","type","parseUnits","decimals","JSON","parse","e","value","resolveAbiInput","input","map","resolveData","data","Interface","signature","encodeFunctionData","inputs","buildTemplate","template","txs","tx","description","to","checkedTx","toString","useStyles","makeStyles","theme","content","padding","width","verticalAlign","App","classes","useState","generatedTxs","setGeneratedTxs","setUserInputs","useSafeAppsSDK","sdk","connected","undefined","setTemplate","updateTemplate","useCallback","newTemplate","a","handleFileUpload","file","target","files","reader","FileReader","onload","result","readAsBinaryString","console","error","handleTemplateUrl","url","length","axios","get","resp","build","execute","send","window","ethereum","enable","ethers","providers","Web3Provider","getSigner","sendTransaction","executeAll","prefersDarkMode","useMediaQuery","React","useMemo","createMuiTheme","palette","primary","blue","ThemeProvider","CssBaseline","className","name","Box","Input","inputProps","accept","onChange","TextField","placeholder","Object","entries","hint","label","newInputs","updateUserInputs","Button","color","onClick","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a42898b2.chunk.js","sourcesContent":["import { parseUnits } from '@ethersproject/units'\nimport { Interface } from '@ethersproject/abi'\nimport { AbiInput, InputId, InteractionTemplate, TemplateInput, TransactionAbi } from '../model/templates';\n\nconst resolveInput = (id: InputId | undefined, templateInputs: Record<InputId, TemplateInput>, userInputs: Record<InputId, string>): any | undefined => {\n    if (!id) return undefined\n    if (id === \"time_now\") return new Date().getMilliseconds() / 1000\n    const templateInput = templateInputs[id]\n    if (!templateInput) throw Error(\"Invalid id \" + id)\n    switch (templateInput.details.type) {\n        case \"bn\":\n            return parseUnits(userInputs[id], templateInput.details.decimals)\n        case \"string\":\n            return userInputs[id]\n        case \"json\":\n            try {\n                return JSON.parse(userInputs[id])\n            } catch (e) {\n                return userInputs[id]\n            }\n        case \"fixed\":\n            return templateInput.details.value\n    }\n}\n\nconst resolveAbiInput = (input: AbiInput, templateInputs: Record<InputId, TemplateInput>, userInputs: Record<InputId, string>): any | undefined => {\n    return (typeof input === \"string\") ? resolveInput(input, templateInputs, userInputs) : input.map((input) => resolveAbiInput(input, templateInputs, userInputs))\n}\n\nconst resolveData = (data: InputId | TransactionAbi | undefined, templateInputs: Record<InputId, TemplateInput>, userInputs: Record<InputId, string>): any | undefined => {\n    if (!data) return undefined\n    if (typeof data === \"string\") return resolveInput(data, templateInputs, userInputs)\n    const contractInterface = new Interface([\"function \" + data.signature])\n    return contractInterface.encodeFunctionData(data.signature, resolveAbiInput(data.inputs, templateInputs, userInputs))\n}\n\nexport interface GeneratedTx {\n    description?: string,\n    to?: any,\n    value?: any,\n    data?: any,\n}\n\nexport const buildTemplate = (template: InteractionTemplate, userInputs: Record<InputId, string>): GeneratedTx[] => {\n    return template.txs.map((tx) => {\n        return {\n            description: tx.description,\n            to: resolveInput(tx.to, template.inputs, userInputs),\n            value: resolveInput(tx.value, template.inputs, userInputs),\n            data: resolveData(tx.data, template.inputs, userInputs),\n        }\n    })\n}","import { GeneratedTx } from \"./encoding\";\n\nexport const checkedTx = (tx: GeneratedTx) => {\n    if (!tx.to) throw Error(\"To is required for Safe transactions\")\n    return {\n        to: tx.to.toString(),\n        value: tx.value?.toString() || \"0\",\n        data: tx.data?.toString() || \"0x\"\n    }\n}","import React, { useCallback, useState } from 'react'\nimport { Box, Button, TextField, Input } from '@material-ui/core'\nimport { makeStyles, createMuiTheme } from '@material-ui/core/styles'\nimport { ThemeProvider } from '@material-ui/styles'\nimport blue from '@material-ui/core/colors/blue'\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { InteractionTemplate, InputId } from './model/templates'\nimport { buildTemplate, GeneratedTx } from './utils/encoding'\nimport { ethers } from 'ethers'\nimport { useSafeAppsSDK } from '@gnosis.pm/safe-apps-react-sdk';\nimport { checkedTx } from './utils/sapp'\nimport axios from 'axios'\n\ndeclare global {\n  interface Window { ethereum: any; }\n}\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    padding: \"16px\"\n  },\n  input: {\n    width: \"100%\"\n  },\n  templateInput: {\n    verticalAlign: \"center\"\n  }\n}));\n\n\nconst updateUserInputs = (inputs: Record<string, string>, id: string, input: string) => {\n  const newInputs = { ...inputs }\n  newInputs[id] = input\n  return newInputs\n}\n\nconst App = () => {\n  const classes = useStyles();\n  const [generatedTxs, setGeneratedTxs] = useState<GeneratedTx[]>([])\n  const [userInputs, setUserInputs] = useState<Record<InputId, string>>({})\n  const { sdk, connected } = useSafeAppsSDK();\n  const [template, setTemplate] = useState<InteractionTemplate | undefined>(undefined)\n\n  const updateTemplate = useCallback(async (newTemplate: InteractionTemplate) => {\n    setTemplate(newTemplate)\n    setUserInputs({})\n    setGeneratedTxs([])\n  }, [setTemplate, setGeneratedTxs, setUserInputs])\n\n  const handleFileUpload = useCallback(async (e: React.ChangeEvent<HTMLInputElement>) => {\n    try {\n      const file = e.target.files!![0]\n      const reader = new FileReader()\n      reader.onload = (e) => {\n        if (!e.target?.result) return;\n        updateTemplate(JSON.parse(e.target.result.toString()))\n      }\n      reader.readAsBinaryString(file)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [updateTemplate])\n\n  const handleTemplateUrl = useCallback(async (url: string) => {\n    if (!url || url.length < 2) return\n    try {\n      const resp = await axios.get<InteractionTemplate>(url);\n      updateTemplate(resp.data)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [updateTemplate])\n\n  const build = useCallback(async () => {\n    if (!template) return\n    try {\n      const txs = buildTemplate(template, userInputs)\n      setGeneratedTxs(txs)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [userInputs, template, setGeneratedTxs])\n\n  const execute = useCallback(async (tx: GeneratedTx) => {\n    try {\n      if (connected) {\n        sdk.txs.send({ txs: [checkedTx(tx)] })\n        return\n      }\n      await window.ethereum.enable()\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      provider.getSigner().sendTransaction({\n        to: tx.to,\n        value: tx.value,\n        data: tx.data\n      })\n    } catch (e) {\n      console.error(e)\n    }\n  }, [connected, sdk])\n\n  const executeAll = useCallback(async (txs: GeneratedTx[]) => {\n    try {\n      sdk.txs.send({ txs: txs.map(checkedTx) })\n    } catch (e) {\n      console.error(e)\n    }\n  }, [sdk])\n\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  const theme = React.useMemo(() => createMuiTheme({\n    palette: {\n      type: prefersDarkMode ? 'dark' : 'light',\n      primary: blue,\n    },\n  }), [prefersDarkMode])\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className={classes.content}>\n        <h1>\n          Transaction template: {template?.name || \"Upload Template\"}\n        </h1>\n        <Box className={classes.templateInput}>\n        <Input type=\"file\" inputProps={{ accept: '.json' }} onChange={handleFileUpload} /> &nbsp; or &nbsp; <TextField\n            placeholder=\"Enter template json url\"\n            onChange={(e) => { handleTemplateUrl(e.target.value) }} />\n        </Box>\n        {template && (<>\n          <h3>Inputs</h3>\n          {Object.entries(template.inputs).map(([id, input]) => {\n            switch (input.details.type) {\n              case \"bn\":\n              case \"json\":\n              case \"string\":\n                return (\n                  <TextField\n                    placeholder={input.details.hint}\n                    label={input.label}\n                    value={userInputs[id] || \"\"}\n                    onChange={(e) => { setUserInputs(updateUserInputs(userInputs, id, e.target.value)) }}\n                    className={classes.input} />\n                )\n            }\n          })}\n          <Button color=\"primary\" onClick={build}>Build</Button>\n          <h3>Transactions {connected && generatedTxs.length > 1 && (<Button color=\"primary\" onClick={() => executeAll(generatedTxs)}>Execute All</Button>)}</h3>\n          {generatedTxs.map((tx, index) => (\n            <>\n              {tx.description || `Transaction #${index + 1}`}\n              <Button color=\"primary\" onClick={() => execute(tx)}>Execute</Button>\n              <br />\n            </>\n          ))}\n        </>)}\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport SafeProvider from '@gnosis.pm/safe-apps-react-sdk';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SafeProvider>\n      <App />\n  </SafeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}