{"version":3,"sources":["utils/encoding.ts","utils/sapp.ts","utils/multisend.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["provider","undefined","resolveInput","id","templateInputs","userInputs","a","Date","getMilliseconds","templateInput","Error","details","type","decimals","parseUnits","JSON","parse","value","contractInterface","Interface","signature","resolveAbiInput","inputs","data","encodeFunctionData","target","to","call","decodeFunctionResult","input","Promise","all","map","resolveData","buildTemplate","template","txs","tx","description","checkedTx","toString","MultiSend","encodeMultiSend","utils","arrayify","solidityPack","length","slice","encodeMetaTransaction","join","generateMultiSendTx","useStyles","makeStyles","theme","content","padding","width","verticalAlign","App","classes","useState","generatedTxs","setGeneratedTxs","setUserInputs","useSafeAppsSDK","safe","sdk","connected","setTemplate","updateTemplate","useCallback","newTemplate","handleFileUpload","e","file","files","reader","FileReader","onload","result","readAsBinaryString","console","error","handleTemplateUrl","url","axios","get","resp","build","SafeAppsSdkProvider","ethers","providers","Web3Provider","window","ethereum","execute","send","enable","getSigner","sendTransaction","buildMultiSend","log","alert","executeAll","prefersDarkMode","useMediaQuery","React","useMemo","createMuiTheme","palette","primary","blue","ThemeProvider","CssBaseline","className","name","Box","Input","inputProps","accept","onChange","TextField","placeholder","Object","entries","hint","label","newInputs","updateUserInputs","Button","color","onClick","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c446039.chunk.js","sourcesContent":["import { parseUnits } from '@ethersproject/units'\nimport { Interface } from '@ethersproject/abi'\nimport { Provider } from '@ethersproject/providers'\nimport { AbiInput, InputId, InteractionTemplate, TemplateInput, TemplateLabel, TransactionAbi } from '../model/templates';\n\nvar provider: Provider | undefined = undefined\n\nexport const setProvider = (_provider: Provider) => {\n    provider = _provider\n}\n\nconst resolveInput = async (id: InputId | undefined, templateInputs: Record<InputId, TemplateInput>, userInputs: Record<InputId, string>): Promise<any | undefined> => {\n    if (!id) return undefined\n    if (id === \"time_now\") return new Date().getMilliseconds() / 1000\n    const templateInput = templateInputs[id]\n    if (!templateInput) throw Error(\"Invalid id \" + id)\n    switch (templateInput.details.type) {\n        case \"bn\": {\n            const decimals = typeof templateInput.details.decimals === \"string\" ? \n                await resolveInput(templateInput.details.decimals, templateInputs, userInputs) :\n                templateInput.details.decimals\n            return parseUnits(userInputs[id], decimals)\n        }\n        case \"string\":\n            return userInputs[id]\n        case \"json\":\n            try {\n                return JSON.parse(userInputs[id])\n            } catch (e) {\n                return userInputs[id]\n            }\n        case \"fixed\":\n            return templateInput.details.value\n        case \"contractCall\": {\n            if (!provider) throw Error(\"Cannot query chain information\")\n            const contractInterface = new Interface([\"function \" + templateInput.details.signature])\n            const data = contractInterface.encodeFunctionData(templateInput.details.signature, await resolveAbiInput(templateInput.details.inputs, templateInputs, userInputs))\n            const to = await resolveInput(templateInput.details.target, templateInputs, userInputs)\n            return contractInterface.decodeFunctionResult(templateInput.details.signature, await provider.call({ to, data }))[0]\n        }\n    }\n}\n\nconst resolveAbiInput = async (input: AbiInput, templateInputs: Record<InputId, TemplateInput>, userInputs: Record<InputId, string>): Promise<any | undefined> => {\n    return (typeof input === \"string\") ?\n        await resolveInput(input, templateInputs, userInputs) :\n        await Promise.all(input.map(async (input) => await resolveAbiInput(input, templateInputs, userInputs)))\n}\n\nconst resolveData = async (data: InputId | TransactionAbi | undefined, templateInputs: Record<InputId, TemplateInput>, userInputs: Record<InputId, string>): Promise<any | undefined> => {\n    if (!data) return undefined\n    if (typeof data === \"string\") return await resolveInput(data, templateInputs, userInputs)\n    const contractInterface = new Interface([\"function \" + data.signature])\n    return contractInterface.encodeFunctionData(data.signature, await resolveAbiInput(data.inputs, templateInputs, userInputs))\n}\n\nexport const resolveLabel = async (label: string | TemplateLabel | undefined, templateInputs: Record<InputId, TemplateInput>, userInputs: Record<InputId, string>): Promise<string | undefined> => {\n    if (!label) return undefined\n    if (typeof label === \"string\") return label\n    const params = await Promise.all(label.params.map(async (param) => { return await resolveInput(param, templateInputs, userInputs) }))\n    return label.parts.map((part) => {\n        return (typeof part === \"string\") ? part : params[part].toString()\n    }).join(\"\")\n}\n\nexport interface GeneratedTx {\n    description?: string,\n    to?: any,\n    value?: any,\n    data?: any,\n}\n\nexport const buildTemplate = async (template: InteractionTemplate, userInputs: Record<InputId, string>): Promise<GeneratedTx[]> => {\n    return await Promise.all(template.txs.map(async (tx) => {\n        return {\n            description: tx.description,\n            to: await resolveInput(tx.to, template.inputs, userInputs),\n            value: await resolveInput(tx.value, template.inputs, userInputs),\n            data: await resolveData(tx.data, template.inputs, userInputs),\n        }\n    }))\n}","import { GeneratedTx } from \"./encoding\";\n\nexport const checkedTx = (tx: GeneratedTx) => {\n    if (!tx.to) throw Error(\"To is required for Safe transactions\")\n    return {\n        to: tx.to.toString(),\n        value: tx.value?.toString() || \"0\",\n        data: tx.data?.toString() || \"0x\"\n    }\n}","\n\nimport { Interface } from '@ethersproject/abi'\nimport { utils } from \"ethers\"\nimport { GeneratedTx } from './encoding'\n\nconst multiSendAddress = \"0x8D29bE29923b68abfDD21e541b9374737B49cdAD\"\nconst MultiSend = new Interface([\"function multiSend(bytes memory transactions) public\"])\n\nconst encodeMetaTransaction = (tx: GeneratedTx): string => {\n    const data = utils.arrayify(tx.data)\n    const encoded = utils.solidityPack(\n        [\"uint8\", \"address\", \"uint256\", \"uint256\", \"bytes\"],\n        [0, tx.to, tx.value, data.length, data]\n    )\n    return encoded.slice(2)\n}\n\n\nexport const encodeMultiSend = (txs: GeneratedTx[]): string => {\n    return \"0x\" + txs.map((tx) => encodeMetaTransaction(tx)).join(\"\")\n}\n\nexport const generateMultiSendTx = (txs: GeneratedTx[]) => {\n    return {\n        to: multiSendAddress,\n        data: MultiSend.encodeFunctionData(\"multiSend\", [encodeMultiSend(txs)])\n    }\n}","import React, { useCallback, useState } from 'react'\nimport { Box, Button, TextField, Input } from '@material-ui/core'\nimport { makeStyles, createMuiTheme } from '@material-ui/core/styles'\nimport { ThemeProvider } from '@material-ui/styles'\nimport blue from '@material-ui/core/colors/blue'\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { InteractionTemplate, InputId } from './model/templates'\nimport { buildTemplate, GeneratedTx, setProvider } from './utils/encoding'\nimport { ethers } from 'ethers'\nimport { SafeAppsSdkProvider } from '@gnosis.pm/safe-apps-ethers-provider';\nimport { useSafeAppsSDK } from '@gnosis.pm/safe-apps-react-sdk';\nimport { checkedTx } from './utils/sapp'\nimport axios from 'axios'\nimport { generateMultiSendTx } from './utils/multisend'\n\ndeclare global {\n  interface Window { ethereum: any; }\n}\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    padding: \"16px\"\n  },\n  input: {\n    width: \"100%\"\n  },\n  templateInput: {\n    verticalAlign: \"center\"\n  }\n}));\n\n\nconst updateUserInputs = (inputs: Record<string, string>, id: string, input: string) => {\n  const newInputs = { ...inputs }\n  newInputs[id] = input\n  return newInputs\n}\n\nconst App = () => {\n  const classes = useStyles();\n  const [generatedTxs, setGeneratedTxs] = useState<GeneratedTx[]>([])\n  const [userInputs, setUserInputs] = useState<Record<InputId, string>>({})\n  const { safe, sdk, connected } = useSafeAppsSDK();\n  const [template, setTemplate] = useState<InteractionTemplate | undefined>(undefined)\n\n  const updateTemplate = useCallback(async (newTemplate: InteractionTemplate) => {\n    setTemplate(newTemplate)\n    setUserInputs({})\n    setGeneratedTxs([])\n  }, [setTemplate, setGeneratedTxs, setUserInputs])\n\n  const handleFileUpload = useCallback(async (e: React.ChangeEvent<HTMLInputElement>) => {\n    try {\n      const file = e.target.files!![0]\n      const reader = new FileReader()\n      reader.onload = (e) => {\n        if (!e.target?.result) return;\n        updateTemplate(JSON.parse(e.target.result.toString()))\n      }\n      reader.readAsBinaryString(file)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [updateTemplate])\n\n  const handleTemplateUrl = useCallback(async (url: string) => {\n    if (!url || url.length < 2) return\n    try {\n      const resp = await axios.get<InteractionTemplate>(url);\n      updateTemplate(resp.data)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [updateTemplate])\n\n  const build = useCallback(async () => {\n    if (!template) return\n    try {\n      const provider = connected ?\n        new SafeAppsSdkProvider(safe, sdk) :\n        new ethers.providers.Web3Provider(window.ethereum)\n      setProvider(provider)\n      const txs = await buildTemplate(template, userInputs)\n      setGeneratedTxs(txs)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [connected, safe, sdk, userInputs, template, setGeneratedTxs])\n\n  const execute = useCallback(async (tx: GeneratedTx) => {\n    try {\n      if (connected) {\n        sdk.txs.send({ txs: [checkedTx(tx)] })\n        return\n      }\n      await window.ethereum.enable()\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      provider.getSigner().sendTransaction({\n        to: tx.to,\n        value: tx.value,\n        data: tx.data\n      })\n    } catch (e) {\n      console.error(e)\n    }\n  }, [connected, sdk])\n\n  const buildMultiSend = useCallback(async (txs: GeneratedTx[]) => {\n    try {\n      console.log(generateMultiSendTx(txs.map(checkedTx)))\n      window.alert(\"Generated TX has been logged to the console\")\n    } catch (e) {\n      console.error(e)\n    }\n  }, [sdk])\n\n  const executeAll = useCallback(async (txs: GeneratedTx[]) => {\n    try {\n      sdk.txs.send({ txs: txs.map(checkedTx) })\n    } catch (e) {\n      console.error(e)\n    }\n  }, [sdk])\n\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  const theme = React.useMemo(() => createMuiTheme({\n    palette: {\n      type: prefersDarkMode ? 'dark' : 'light',\n      primary: blue,\n    },\n  }), [prefersDarkMode])\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className={classes.content}>\n        <h1>\n          Transaction template: {template?.name || \"Upload Template\"}\n        </h1>\n        <Box className={classes.templateInput}>\n        <Input type=\"file\" inputProps={{ accept: '.json' }} onChange={handleFileUpload} /> &nbsp; or &nbsp; <TextField\n            placeholder=\"Enter template json url\"\n            onChange={(e) => { handleTemplateUrl(e.target.value) }} />\n        </Box>\n        {template && (<>\n          <h3>Inputs</h3>\n          {Object.entries(template.inputs).map(([id, input]) => {\n            switch (input.details.type) {\n              case \"bn\":\n              case \"json\":\n              case \"string\":\n                return (\n                  <TextField\n                    placeholder={input.details.hint}\n                    label={input.label}\n                    value={userInputs[id] || \"\"}\n                    onChange={(e) => { setUserInputs(updateUserInputs(userInputs, id, e.target.value)) }}\n                    className={classes.input} />\n                )\n            }\n          })}\n          <Button color=\"primary\" onClick={build}>Build</Button>\n          <h3>Transactions {generatedTxs.length > 1 && (<Button color=\"primary\" onClick={() => connected ? executeAll(generatedTxs) : buildMultiSend(generatedTxs)}>{connected ? \"Execute All\": \"Build Tx\"}</Button>)}</h3>\n          {generatedTxs.map((tx, index) => (\n            <>\n              {tx.description || `Transaction #${index + 1}`}\n              <Button color=\"primary\" onClick={() => execute(tx)}>Execute</Button>\n              <br />\n            </>\n          ))}\n        </>)}\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport SafeProvider from '@gnosis.pm/safe-apps-react-sdk';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SafeProvider>\n      <App />\n  </SafeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}